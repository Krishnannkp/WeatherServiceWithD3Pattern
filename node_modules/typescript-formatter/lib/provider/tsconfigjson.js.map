{"version":3,"file":"tsconfigjson.js","sourceRoot":"","sources":["tsconfigjson.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAEjC,2BAA6B;AAC7B,uBAAyB;AAGzB,kCAAwD;AAExD,+BAA8C,QAAgB,EAAE,IAAa,EAAE,cAAqC;IAEhH,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAAc,GAAG,yBAAiB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACjE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,UAAQ,cAAc,aAAQ,QAAU,CAAC,CAAC;IAC1D,CAAC;IAED,6DAA6D;IAC7D,oGAAoG;IACpG,IAAM,IAAI,GAA6D;QACnE,yBAAyB,EAAE,IAAI;QAC/B,aAAa,EAAE,UAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS;YACrD,4CAA4C;YAC5C,4BAA4B;YAE5B,IAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK;iBACP,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,KAAK,OAAO,EAAhB,CAAgB,CAAC,EAA3C,CAA2C,CAAC,CAAC;QACrE,CAAC;QACD,UAAU,EAAE,UAAA,IAAI,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACvC,QAAQ,EAAE,UAAC,IAAY,IAAK,OAAA,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,EAA9B,CAA8B;KAC7D,CAAC;IACF,IAAI,UAAU,GAAG,iBAAS,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACrE,IAAI,MAAM,GAAG,EAAE,CAAC,0BAA0B,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACtE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAb,CAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACnE,cAAc,CAAC,gBAAgB,GAAG,MAAM,CAAC;IAC7C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED,MAAM,CAAC,cAAc,CAAC;AAC1B,CAAC;AAvCD,wCAuCC","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, parseJSON } from \"../utils\";\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tsconfig.json\");\n    if (!configFileName) {\n        return formatSettings;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    // for `extends` support. It supported from TypeScript 2.1.1.\n    // `& { readFile(path: string): string; }` is backword compat for TypeScript compiler 2.0.3 support.\n    const host: ts.ParseConfigHost & { readFile(path: string): string; } = {\n        useCaseSensitiveFileNames: true,\n        readDirectory: (rootDir, _extensions, excludes, _includes) => {\n            // _extensions -> [ '.ts', '.tsx', '.d.ts' ]\n            // _includes   -> [ '**/*' ]\n\n            const files = fs.readdirSync(rootDir);\n            return files\n                .filter(file => excludes.every(exclude => file !== exclude));\n        },\n        fileExists: path => fs.existsSync(path),\n        readFile: (path: string) => fs.readFileSync(path, \"utf-8\"),\n    };\n    let rootConfig = parseJSON(fs.readFileSync(configFileName, \"utf-8\"));\n    let parsed = ts.parseJsonConfigFileContent(rootConfig, host, baseDir);\n    if (parsed.errors && parsed.errors.length !== 0) {\n        throw new Error(parsed.errors.map(e => e.messageText).join(\"\\n\"));\n    }\n\n    if (parsed.options.newLine === ts.NewLineKind.CarriageReturnLineFeed) {\n        formatSettings.newLineCharacter = \"\\r\\n\";\n    } else if (parsed.options.newLine === ts.NewLineKind.LineFeed) {\n        formatSettings.newLineCharacter = \"\\n\";\n    }\n\n    return formatSettings;\n}\n"]}